/*
 * generated by Xtext 2.10.0
 */
package de.fhg.aisec.lucon.generator

import de.fhg.aisec.lucon.lucondsl.AtomExpression
import de.fhg.aisec.lucon.lucondsl.Expression
import de.fhg.aisec.lucon.lucondsl.Label

import de.fhg.aisec.lucon.lucondsl.ListExpression
import de.fhg.aisec.lucon.lucondsl.NumberExpression
import de.fhg.aisec.lucon.lucondsl.Obligation
import de.fhg.aisec.lucon.lucondsl.PL_ATOMS
import de.fhg.aisec.lucon.lucondsl.Policy
import de.fhg.aisec.lucon.lucondsl.ServiceBody
import de.fhg.aisec.lucon.lucondsl.StringExpression
import de.fhg.aisec.lucon.lucondsl.UnaryExpression
import de.fhg.aisec.lucon.lucondsl.VariableExpression
import de.fhg.aisec.lucon.lucondsl.impl.AtomExpressionImpl
import de.fhg.aisec.lucon.lucondsl.impl.NumberExpressionImpl
import de.fhg.aisec.lucon.lucondsl.impl.StringExpressionImpl
import de.fhg.aisec.lucon.lucondsl.impl.VariableExpressionImpl
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import de.fhg.aisec.lucon.lucondsl.CreatesLabel
import de.fhg.aisec.lucon.lucondsl.RemovesLabel

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class LucondslGenerator extends AbstractGenerator {
/**
	 * Code generation is implemented by overriding this method.
	 */
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		fsa.generateFile(resource.className+"_policy.pl", toPrologProgram(resource.contents.head as Policy))
	}
	
	def className(Resource res) {
		var name = res.getURI.lastSegment
		return name.substring(0, name.indexOf('.'))
	}
	
	def toPrologQueries(Policy pol) '''
		«FOR r : pol.rules»
			«//rule_«r.name» :- «FOR label : r.labels»has_label(_M, «label»), «ENDFOR» «FOR s : r.services»«FOR p : s.properties»has_property(«s.name», «p.expr»)«ENDFOR»«ENDFOR».»
		ENDFOR»
	'''

	def CharSequence createIdentifier(Obligation o) {
		return StringExtensions.toFirstLower(("obl" + o.hashCode).replace('.', ''));
	}

	def CharSequence createIdentifier(ServiceBody s) {
		return StringExtensions.toFirstLower(("service" + s.hashCode).replace('.', ''));
	}

	def CharSequence printLabel(CreatesLabel label) {
		if (label===null) {
			return "";
		}
		'''«label»''';
	}
	
	def CharSequence printLabel(RemovesLabel label) {
		if (label===null) {
			return "";
		}
		'''«label»''';
	}
	
	def CharSequence printLabel(Label l) {
		if (l===null) {
			return "";
		}
		
		'''«l.name»«IF l.terms !== null»(«printExpression(l.terms)»)«ENDIF»'''
	}
	
	def CharSequence printExpression(Expression e) {
		if (e===null) {
			return "";
		}
		if (e instanceof UnaryExpression) {
			return printExpression(e as UnaryExpression);
		} else if (e instanceof ListExpression) {
			return printExpression(e as ListExpression);
		} else if (e instanceof AtomExpressionImpl) {
			return printExpression(e as AtomExpressionImpl);
		} else if (e instanceof VariableExpressionImpl) {
			return printExpression(e as VariableExpressionImpl);
		} else if (e instanceof NumberExpressionImpl) {
			return printExpression(e as NumberExpressionImpl);
		} else if (e instanceof StringExpressionImpl) {
			return printExpression(e as StringExpressionImpl);
		} else {				
			return printExpression(e.left) + e.op + printExpression(e.right);
		}
	}

	def printExpression(UnaryExpression e) '''«e.op?:""»«printExpression(e.right)»'''

	def printExpression(AtomExpression e) '''«printAtom(e.atom)»«IF (e.terms!==null)»(«printExpression(e.terms)»)«ENDIF»'''

	def printExpression(ListExpression e) '''list(«printExpression(e.head)»|«printExpression(e.tail)»«printExpression(e.left)»«e.op»«printExpression(e.right)»)'''

	def printExpression(StringExpression e) '''«e.value»'''

	def printExpression(NumberExpression e) '''«e.value»'''

	def printExpression(VariableExpression e) '''«e.name»'''

	def printAtom(PL_ATOMS a) '''«a.name?:a»'''

	def toPrologProgram(Policy pol) '''		
		%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		%   Prolog representation of a data flow policy
		%   
		%   Source: «pol.eResource.className»
		% 	
		%	Do not edit this file, it has been generated automatically
		% 	by XText/Xtend.
		%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		%
		% Only required for SWI-Prolog
		% Allow the following predicates to be scattered around the prolog file.
		% Otherwise Prolog will issue a warning if they are not stated in subsequent lines.
		%:- discontiguous service/1.
		%:- discontiguous has_endpoint/2.
		%:- discontiguous creates_label/2.
		%:- discontiguous removes_label/2.
		%:- discontiguous rule/1.
		%:- discontiguous rule_priority/2.
		%:- discontiguous receives_label/1.
		%:- discontiguous has_decision/2.
		%:- discontiguous has_target/2.
		%:- discontiguous has_capability/2.
		%:- discontiguous has_property/3.
		%:- discontiguous requires_prerequisites/2.
		%:- discontiguous has_alternativedecision/2.
		%:- discontiguous has_obligation/2.
		
		%%%%%%%%% Basic Blocking Rule %%%%%%%%%%
		rule(dropAll).
		rule_priority(dropAll,0).
		has_decision(dropAll,drop).
		receives_label(dropAll).
		has_target(dropAll,serviceAll).
		
		%%%%%%%%%% Catch All Service %%%%%%%%%%%
		service(serviceAll).
		has_endpoint(serviceAll,'.*').
		
		%%%%%%%%%%%%%%%% Rules %%%%%%%%%%%%%%%%%
		«FOR i: 0..pol.rules.size-1»
			«val r = pol.rules.get(i)»
			% «r.description.replace("\n", "\n%")»
			rule(«r.name»).
			«IF r.priority===null»
				rule_priority(«r.name», 1).
			«ELSE»
				rule_priority(«r.name», «r.priority»).
			«ENDIF»
			«IF r.saSvcs.size() > 0»
				«FOR ref : r.saSvcs»
					has_target(«r.name», «ref.name»).
				«ENDFOR»
			«ELSEIF r.inline!==null» 
				has_target(«r.name», «createIdentifier(r.inline)»).
				service(«createIdentifier(r.inline)»).
				has_endpoint(«createIdentifier(r.inline)»,"«r.inline.url.regex»").
				«FOR cap : r.inline.capabilities»
					has_capability(«createIdentifier(r.inline)», cap).
				«ENDFOR»
				«FOR prop : r.inline.properties»
					has_property(«createIdentifier(r.inline)», prop).
				«ENDFOR»
			«ELSE»
				 has_target(«r.name», serviceAll).
			«ENDIF»
			«IF r.receivesAny!==null»
			receives_label(«r.name»).
			«ELSE»
			receives_label(«r.name») :- «printExpression(r.receivesLabels)».
			«ENDIF»
			«IF (r.decision!==null)»
				has_decision(«r.name», «r.decision»).
			«ENDIF»
			«FOR o : r.obligations»
				has_obligation(«r.name», «createIdentifier(o)»).
				requires_prerequisite(«createIdentifier(o)», («printExpression(o.action)»)).
				«IF (o.alternativeDecision!==null)»
					has_alternativedecision(«createIdentifier(o)», «o.alternativeDecision»).
				«ENDIF»
			«ENDFOR»
		«ENDFOR»
		
		%%%%%%%%%%%%%%% Services %%%%%%%%%%%%%%%
		«FOR s : pol.services»
			service(«s.name»).
			has_endpoint(«s.name», "«s.spec.url.regex»").
			«IF s.spec.creates!==null»
				«FOR c : s.spec.creates»
					«FOR l : c.labels»
						creates_label(«s.name», label(«printLabel(l)»)).
					«ENDFOR»
				«ENDFOR»
			«ENDIF»
			«IF s.spec.removes!==null»
				«FOR r : s.spec.removes»
					«FOR l : r.labels»
						removes_label(«s.name», label(«printLabel(l)»)).
					«ENDFOR»
				«ENDFOR»
			«ENDIF»
			«FOR cap : s.spec.capabilities»
				has_capability(«s.name»,«cap.name»,«cap.expr»).
			«ENDFOR»
			«FOR prop : s.spec.properties»
				has_property(«s.name»,«prop.name»,«prop.expr»).
			«ENDFOR»
		«ENDFOR»
	'''	
}
